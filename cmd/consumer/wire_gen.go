// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"demo_message/internal/biz"
	"demo_message/internal/conf"
	"demo_message/internal/data"
	"demo_message/internal/server"
	"demo_message/internal/service/consumer"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/neo532/apitool/transport/http/xhttp/client"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(contextContext context.Context, bootstrap *conf.Bootstrap, clientClient client.Client, logger log.Logger) (*kratos.App, func(), error) {
	databaseMessage, cleanup, err := data.NewDatabaseMessage(contextContext, bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	transactionMessageRepo := data.NewTransactionMessageRepo(databaseMessage, logger)
	campaignRepo := data.NewCampaignRepo(databaseMessage)
	producerMessage, cleanup2, err := data.NewProducerMessage(contextContext, bootstrap, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	messageXHttpClient := data.NewMessageXHttpClient(clientClient, bootstrap)
	messageRepo := data.NewMessageRepo(databaseMessage, producerMessage, messageXHttpClient)
	recipientRepo := data.NewRecipientRepo(databaseMessage)
	messageUsecase := biz.NewMessageUsecase(transactionMessageRepo, campaignRepo, messageRepo, recipientRepo)
	messageConsumer := consumer.NewMessageConsumer(messageUsecase, logger)
	queueConsumer := server.NewConsumerMessage(contextContext, bootstrap, logger, messageConsumer)
	app := newApp(contextContext, bootstrap, logger, queueConsumer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
